// Generated by gencpp from file franka_example_controllers/Floatraj.msg
// DO NOT EDIT!


#ifndef FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_FLOATRAJ_H
#define FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_FLOATRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_example_controllers
{
template <class ContainerAllocator>
struct Floatraj_
{
  typedef Floatraj_<ContainerAllocator> Type;

  Floatraj_()
    : traj()  {
      traj.assign(0.0);
  }
  Floatraj_(const ContainerAllocator& _alloc)
    : traj()  {
  (void)_alloc;
      traj.assign(0.0);
  }



   typedef boost::array<double, 3>  _traj_type;
  _traj_type traj;





  typedef boost::shared_ptr< ::franka_example_controllers::Floatraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_example_controllers::Floatraj_<ContainerAllocator> const> ConstPtr;

}; // struct Floatraj_

typedef ::franka_example_controllers::Floatraj_<std::allocator<void> > Floatraj;

typedef boost::shared_ptr< ::franka_example_controllers::Floatraj > FloatrajPtr;
typedef boost::shared_ptr< ::franka_example_controllers::Floatraj const> FloatrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_example_controllers::Floatraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_example_controllers::Floatraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_example_controllers::Floatraj_<ContainerAllocator1> & lhs, const ::franka_example_controllers::Floatraj_<ContainerAllocator2> & rhs)
{
  return lhs.traj == rhs.traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_example_controllers::Floatraj_<ContainerAllocator1> & lhs, const ::franka_example_controllers::Floatraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_example_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_example_controllers::Floatraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_example_controllers::Floatraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_example_controllers::Floatraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5834651d8cc85e5c144efcfb0dab20e";
  }

  static const char* value(const ::franka_example_controllers::Floatraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5834651d8cc85e5ULL;
  static const uint64_t static_value2 = 0xc144efcfb0dab20eULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_example_controllers/Floatraj";
  }

  static const char* value(const ::franka_example_controllers::Floatraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] traj\n"
;
  }

  static const char* value(const ::franka_example_controllers::Floatraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Floatraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_example_controllers::Floatraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_example_controllers::Floatraj_<ContainerAllocator>& v)
  {
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_FLOATRAJ_H
